searchState.loadedDescShard("mpris_server", 0, "MPRIS Server\nAlphabetical ordering by name, ascending.\nOrdering by creation date, oldest first.\nCombined date and time.\nOrdering by date of last playback, oldest first.\nLocal version of <code>PlayerInterface</code> to be used with …\nLocal version of <code>PlaylistsInterface</code> to be used with …\nLocal version of <code>RootInterface</code> to be used with <code>LocalServer</code>.\nLocal version of <code>Server</code> that doesn’t require <code>T</code> to be <code>Send</code>…\nA task that runs <code>LocalServer</code>’s event handler until the …\nLocal version of <code>TrackListInterface</code> to be used with …\nA repeat / loop status.\nThe maximum time.\nThe minimum time.\nA mapping from metadata attribute names to values.\nOrdering by last modified date, oldest first.\nA special track ID to indicate “no track”.\nThe playback will stop when there are no more tracks to …\nA track is currently paused.\nA playback rate.\nA playback state.\nReady-to-use mutable <em>service</em>-side object that internally …\nUsed to implement org.mpris.MediaPlayer2.Player interface, …\nA track is currently playing.\nA data structure describing a playlist.\nThe playback loops through a list of tracks.\nIndicates that either the Name or Icon attribute of a …\nUnique playlist identifier.\nSpecifies the ordering of returned playlists.\nUsed to implement org.mpris.MediaPlayer2.Playlists …\nUsed for emitting <code>PropertiesChanged</code> signals on …\nUsed for emitting signals on <code>Server::playlists_emit</code> and …\nUsed for emitting <code>PropertiesChanged</code> signals on …\nUsed to implement org.mpris.MediaPlayer2 interface.\nIndicates that the track position has changed in a way …\nThin wrapper around <code>zbus::Connection</code> that calls to <code>T</code>’s …\nUsed for emitting signals on <code>Server::emit</code> and …\nThere is no track currently playing.\nA time with microsecond precision which can be negative.\nThe current track will start again from the beginning once …\nIndicates that a track has been added to the track list.\nUnique track identifier.\nUsed to implement org.mpris.MediaPlayer2.TrackList …\nUsed for emitting <code>PropertiesChanged</code> signals on …\nIndicates that the entire tracklist has been replaced.\nUsed for emitting signals on <code>Server::track_list_emit</code> and …\nIndicates that the metadata of a track in the tracklist …\nIndicates that a track has been removed from the track …\nA unique resource identifier.\nA user-defined ordering.\nAudio volume level.\nA time of zero.\nReturns the time as an absolute (non-negative) value.\nStarts playing the given playlist.\nStarts playing the given playlist.\nThe currently-active playlist.\nThe currently-active playlist.\nAdds a URI in the tracklist.\nAdds a URI in the tracklist.\nThe album name.\nThe album artist(s).\nThe location of an image representing the track or album.\nThe track artist(s).\nReturns the number of <em>whole</em> microseconds contained by this …\nReturns the number of <em>whole</em> milliseconds contained by this …\nReturns the number of <em>whole</em> nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this <code>Time</code>.\nReturns the string representation of this loop status.\nReturns the string representation of this playback status.\nReturns the string representation of this playlist …\nThe speed of the music, in beats per minute.\nAn automatically-generated rating, based on things such as …\nThis contains the definitions of builder-pattern structs.\nCreates a new builder-pattern struct instance to construct …\nReturns the bus name of the server.\nWhether the media player may be controlled over this …\nWhether the media player may be controlled over this …\nThis can only be set on construct.\nWhether tracks can be added to and removed from the …\nWhether tracks can be added to and removed from the …\nWhether the client can call the <code>Next</code> method on this …\nWhether the client can call the <code>Next</code> method on this …\nWhether the client can call the <code>Previous</code> method on this …\nWhether the client can call the <code>Previous</code> method on this …\nWhether playback can be paused using <code>Pause</code> or <code>PlayPause</code>.\nWhether playback can be paused using <code>Pause</code> or <code>PlayPause</code>.\nWhether playback can be started using <code>Play</code> or <code>PlayPause</code>.\nWhether playback can be started using <code>Play</code> or <code>PlayPause</code>.\nWhether the player may be asked to quit.\nWhether the player may be asked to quit.\nWhether the media player may be asked to be raised.\nWhether the media player may be asked to be raised.\nWhether the client can control the playback position using …\nWhether the client can control the playback position using …\nWhether the player may be asked to enter or leave …\nWhether the player may be asked to enter or leave …\nChecked <code>Time</code> addition. Computes <code>self + other</code>, returning …\nChecked <code>Time</code> subtraction. Computes <code>self - other</code>, returning …\nA (list of) freeform comment(s).\nThe composer(s) of the track.\nReturns a reference to the inner <code>zbus::Connection</code>.\nReturns a reference to the inner <code>Connection</code>.\nWhen the track was created. Usually only the year component\nThe basename of an installed .desktop file which complies …\nThe basename of an installed .desktop file which complies …\nThe disc number on the album that this track is from.\nEmits the given signal.\nEmits the given signal.\nWhen the track was first played.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Time</code> from the specified number of whole …\nCreates a new <code>Time</code> from the specified number of whole …\nCreates a new <code>Time</code> from the specified number of whole …\nCreates a new <code>Time</code> from the specified number of whole …\nWhether the media player is occupying the fullscreen.\nWhether the media player is occupying the fullscreen.\nThe genre(s) of the track.\nReturns the value corresponding to the key and convert it …\nGets a set of playlists.\nGets a set of playlists.\nGets all the metadata available for a set of tracks.\nGets all the metadata available for a set of tracks.\nReturns a reference to the value corresponding to the key.\nSkip to the specified TrackId.\nSkip to the specified TrackId.\nIndicates whether the <code>/org/mpris/MediaPlayer2</code> object …\nIndicates whether the <code>/org/mpris/MediaPlayer2</code> object …\nThe URI of an (optional) icon.\nA unique identifier for the playlist.\nA friendly name to identify the media player to users (eg: …\nA friendly name to identify the media player to users (eg: …\nReturns a reference to the underlying implementation.\nReturns a reference to the underlying implementation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the track ID as an <code>ObjectPath</code>.\nReturns true if this <code>Time</code> is negative.\nReturns true if this <code>Time</code> is positive.\nReturns true if this <code>Time</code> is zero.\nWhen the track was last played.\nThe duration of the track.\nThe current loop / repeat status\nThe current loop / repeat status\nThe lyricist(s) of the track.\nThe track lyrics.\nThe maximum value which the <code>Rate</code> property can take. …\nThe maximum value which the <code>Rate</code> property can take. …\nThe metadata of the current element.\nThe metadata of the current element.\nThe minimum value which the <code>Rate</code> property can take. …\nThe minimum value which the <code>Rate</code> property can take. …\nThe name of the playlist, typically given by the user.\nCreates a new <code>LocalServer</code> with the given bus name suffix …\nCreates a new <code>Server</code> with the given bus name suffix and …\nCreates an empty <code>Metadata</code>.\nCreates a new <code>LocalServer</code> with the given bus name suffix …\nCreates a new <code>Server</code> with the given bus name suffix and …\nCreates a new <code>LocalServer</code> with the given bus name suffix …\nCreates a new <code>Server</code> with the given bus name suffix and …\nCreates a new <code>LocalServer</code> with the given bus name suffix …\nCreates a new <code>Server</code> with the given bus name suffix and …\nSkips to the next track in the tracklist.\nSkips to the next track in the tracklist.\nOpens the <code>uri</code> given as an argument\nOpens the <code>uri</code> given as an argument\nThe available orderings. At least one must be offered.\nThe available orderings. At least one must be offered.\nPauses playback.\nPauses playback.\nStarts or resumes playback.\nStarts or resumes playback.\nPauses playback.\nPauses playback.\nThe current playback status.\nThe current playback status.\nThe number of playlists available.\nThe number of playlists available.\nEmits the given signal on the <code>Playlists</code> interface.\nEmits the given signal on the <code>Playlists</code> interface.\nEmits the <code>PropertiesChanged</code> signal for the given …\nEmits the <code>PropertiesChanged</code> signal for the given …\nThe current track position, between 0 and the <code>mpris:length</code> …\nThe current track position, between 0 and the <code>mpris:length</code> …\nSkips to the previous track in the tracklist.\nSkips to the previous track in the tracklist.\nEmits the <code>PropertiesChanged</code> signal for the given …\nEmits the <code>PropertiesChanged</code> signal for the given …\nCauses the media player to stop running.\nCauses the media player to stop running.\nBrings the media player’s user interface to the front …\nBrings the media player’s user interface to the front …\nThe current playback rate.\nThe current playback rate.\nReleases the bus name of the server.\nRemoves an item from the tracklist.\nRemoves an item from the tracklist.\nReturns a task that run the server until the server and …\nReturns a task that runs the player’s server until the …\nSaturating <code>Time</code> addition. Computes <code>self + other</code>, returning …\nSaturating <code>Time</code> subtraction. Computes <code>self - other</code>, …\nSeeks forward in the current track by the specified offset …\nSeeks forward in the current track by the specified offset …\nReplaces the value for the given key and returns the …\nSets the album name.\nSets the album artist(s).\nSets the location of an image representing the track or …\nSets the track artist(s).\nSets the speed of the music, in beats per minute.\nSets an automatically-generated rating, based on things …\nSets a (list of) freeform comment(s).\nSets the composer(s) of the track.\nSets when the track was created. Usually only the year …\nSets the disc number on the album that this track is from.\nSets when the track was first played.\nSets whether the media player is occupying the fullscreen.\nSets whether the media player is occupying the fullscreen.\nSets the genre(s) of the track.\nSets when the track was last played.\nSets the duration of the track.\nSets the current loop / repeat status\nSets the current loop / repeat status\nSets the lyricist(s) of the track.\nSets the track lyrics.\nSets the current track position.\nSets the current track position.\nThis does not emit <code>PropertiesChanged</code> signal.\nSets the current playback rate.\nSets the current playback rate.\nSets whether playback is shuffled.\nSets whether playback is shuffled.\nSets the track title.\nSets the track number on the album disc.\nSets a unique identity for this track within the context …\nSets the location of the media file.\nSets the number of times the track has been played.\nSets a user-specified rating. This should be in the range …\nReplaces the value for the given key and returns the …\nSets the volume level.\nSets the volume level.\nWhether playback is shuffled.\nWhether playback is shuffled.\nStops playback.\nStops playback.\nThe mime-types supported by the media player.\nThe mime-types supported by the media player.\nThe URI schemes supported by the media player.\nThe URI schemes supported by the media player.\nThe track title.\nEmits the given signal on the <code>TrackList</code> interface.\nEmits the given signal on the <code>TrackList</code> interface.\nEmits the <code>PropertiesChanged</code> signal for the given …\nEmits the <code>PropertiesChanged</code> signal for the given …\nThe track number on the album disc.\nA unique identity for this track within the context of an …\nAn array which contains the identifier of each track in …\nAn array which contains the identifier of each track in …\nThe location of the media file.\nThe number of times the track has been played.\nA user-specified rating. This should be in the range 0.0 …\nThe volume level.\nThe volume level.\nThe playlist which details have changed.\nThe new position.\nThe identifier of the track after which the new track was …\nThe identifier of the track to be considered as current.\nThe metadata of the newly added item.\nThe new track metadata.\nThe identifier of the track being removed.\nThe id of the track which metadata has changed.\nThe new content of the tracklist.\nA builder used to create <code>Metadata</code>.\nA builder used to create <code>Player</code>.\nSets the album name.\nSets the album artist(s).\nSets the location of an image representing the track or …\nSets the track artist(s).\nSets the speed of the music, in beats per minute.\nSets an automatically-generated rating, based on things …\nCreates <code>Metadata</code> from the builder.\nSets a (list of) freeform comment(s).\nSets the composer(s) of the track.\nSets when the track was created. Usually only the year …\nSets the disc number on the album that this track is from.\nSets when the track was first played.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the genre(s) of the track.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets when the track was last played.\nSets the duration of the track.\nSets the lyricist(s) of the track.\nSets the track lyrics.\nSets a value for the given key.\nSets the track title.\nSets the track number on the album disc.\nSets a unique identity for this track within the context …\nSets the location of the media file.\nSets the number of times the track has been played.\nSets a user-specified rating. This should be in the range …")